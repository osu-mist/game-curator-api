swagger: '2.0'
info:
  title: 'Game Curator API'
  description: 'Learning project API to retrieve and manipulate game review data.'
  version: 'v1'
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
schemes:
  - http
host: 'api.oregonstate.edu'
basePath: /v1
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/game-curator-api
produces:
  - application/json
paths:
  /game:
    parameters:
      - $ref: '#/parameters/authorization'
    get:
      summary: List all games
      description: Get all games
      tags:
        - Games
      parameters:
        - $ref: '#/parameters/pageNumber'
        - $ref: '#/parameters/pageSize'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/GameResults'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Errors'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    #post:
    #  summary: Add a new game
    #  tags:
    #    - Games
    #  responses:
    #    201:
    #      description: Successfully added a game
    #    405:
    #      description: Invalid input
    #      schema:
    #        $ref: '#/definitions/Errors'
    #    500:
    #      description: Internal server error
    #      schema:
    #        $ref: '#/definitions/Errors'
  /game/{gameId}:
    get:
      summary: Find game by ID
      description: Returns a single game
      tags:
        - Games
      parameters:
      - name: gameId
        in: path
        description: Id of game to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/GameResult'
        404:
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
  /review/{gameId}:
    get:
      summary: Find reviews by game Id
      description: Returns all reviews that belong to a particular game
      tags:
        - Reviews
      parameters:
      - name: gameId
        in: path
        description: Id of game to return reviews for
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/ReviewResults'
        404:
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'

parameters:
  authorization:
    name: Authorization
    in: header
    type: string
    required: true
    description: '"Bearer [token]" where [token] is your OAuth2 access token'
  pageNumber:
    name: page[number]
    in: query
    type: integer
    required: false
    description: Page number of results
    default: 1
    minimum: 1
  pageSize:
    name: page[size]
    in: query
    type: integer
    required: false
    description: Number of results to return
    default: 25
    maximum: 500
    minimum: 1
definitions:
  Meta:
    properties:
      totalResults:
        type: integer
        description: Total number of results
        example: 10
      totalPages:
        type: integer
        description: Total number of pages
        example: 10
      currentPageNumber:
        type: integer
        description: Page number of the returned results
        example: 1
      currentPageSize:
        type: integer
        description: Number of results per page
        example: 25
  GameResource:
    properties:
      id:
        type: integer
        format: int64
      developer:
        $ref: '#/definitions/DeveloperResource'
      name:
        type: string
        description: Name of the game
        example: Eternal Death Slayer 3
      score:
        type: number
        format: float
        description: Composite review score of this game out of 5
        example: 4.5
      links:
        $ref: '#/definitions/SelfLink'
  GameResult:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/GameResource'
  GameResults:
    properties: 
      links:
        allOf:
          - $ref: '#/definitions/SelfLink'
          - $ref: '#/definitions/PaginationLinks'
      meta:
        $ref: '#/definitions/Meta'
      data:
        type: array
        items:
          $ref: '#/definitions/GameResource'
  DeveloperResource:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        description: Name of the developer
        example: Terminal Reality
  DeveloperResult:
    properties: 
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/DeveloperResource'
  ReviewResource:
    properties:
      id:
        type: integer
        format: int64
      game:
        $ref: '#/definitions/GameResource'
      reviewer:
        type: string
        description: Person who wrote the review.
        example: Commander Shepard
      score:
        type: number
        format: float
        description: Score for this review out of 5
        example: 4.5
      reviewText:
        type: string
        description: Text containing the review for the referenced game
        example: My name is Commander Shepard and this is my favorite game on the citadel.
  ReviewResult:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/ReviewResource'
  ReviewResults:
    properties: 
      links:
        allOf:
          - $ref: '#/definitions/SelfLink'
          - $ref: '#/definitions/PaginationLinks'
      meta:
        $ref: '#/definitions/Meta'
      data:
        type: array
        items:
          $ref: '#/definitions/ReviewResource'
  ReviewPostBody:
    properties: 
      data:
        type: object
        properties:
          reviewText:
            $ref: '#/definitions/ReviewResource/properties/reviewText'
          score:
            $ref: '#/definitions/ReviewResource/properties/score'
        required:
        - reviewText
        - score
  SelfLink:
    properties:
      self:
        type: string
        format: url
        description: Self-link of current resource
  PaginationLinks:
    properties:
      first:
        type: string
        format: url
        description: The first page of data
      last:
        type: string
        format: url
        description: The last page of data
      prev:
        type: string
        format: url
        description: The previous page of data
      next:
        type: string
        format: url
        description: The next page of data
  Error:
    properties:
      status:
        type: string
        description: HTTP status code
        example: '123'
      title:
        type: string
        description: A short, user readable summary of the error
        example: Not Found
      code:
        type: string
        description: An application-specific error code
        example: '1234'
      detail:
        type: string
        description: A long description of the error that may contain instance-specific details
      links:
        properties:
          about:
            type: string
            format: url
            description: A link to further information about the error
            example: https://developer.oregonstate.edu/documentation/error-reference#1234
  Errors:
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
